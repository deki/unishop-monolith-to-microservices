{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Metadata": {

	},
	"Parameters": {
		  "LatestAmiId":{
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2",
						"Description" : "Use an AMI of your choosing, we recommend to use the latest available"
	    }
	},
	"Resources": {
		"MonoToMicroVPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/16",
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"InstanceTenancy": "default",
				"Tags": [{
					"Key": "Name",
					"Value": "MonoToMicro"
				}]
			}
		},
		"MonoToMicroIGW": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": "MonoToMicroIGW"
				}]
			}
		},
		"AttachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"InternetGatewayId": {
					"Ref": "MonoToMicroIGW"
				}
			}
		},
		"MonoToMicroSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"CidrBlock": "10.0.0.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"MapPublicIpOnLaunch": "true",
				"Tags": [{
					"Key": "Name",
					"Value": "MonoToMicroSubnet1"
				}]
			}
		},
		"MonoToMicroSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"CidrBlock": "10.0.1.0/24",
				"AvailabilityZone": {
					"Fn::Select": [
						"1",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"MapPublicIpOnLaunch": "true",
				"Tags": [{
					"Key": "Name",
					"Value": "MonoToMicroSubnet2"
				}]
			}
		},
		"MonoToMicroPublicRoutTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "MonoToMicroPublicRoutTable"
				}]
			}
		},
		"MonoToMicroPublicRout": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "AttachGateway",
			"Properties": {
				"RouteTableId": {
					"Ref": "MonoToMicroPublicRoutTable"
				},
				"GatewayId": {
					"Ref": "MonoToMicroIGW"
				},
				"DestinationCidrBlock": "0.0.0.0/0"
			}
		},
		"MonoToMicroPublicSubnetRoutTableAssoc1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "MonoToMicroPublicRoutTable"
				},
				"SubnetId": {
					"Ref": "MonoToMicroSubnet1"
				}
			}
		},
		"MonoToMicroPublicSubnetRoutTableAssoc2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "MonoToMicroPublicRoutTable"
				},
				"SubnetId": {
					"Ref": "MonoToMicroSubnet2"
				}
			}
		},
		"DBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Open database for access",
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": 3306,
					"ToPort": 3306,
					"SourceSecurityGroupId": { "Ref": "EC2SecurityGroup" }
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "MonoToMicroDBSG"
				}]
			}
		},
		"DBSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "MonoToMicroDBSubnetGroup",
				"SubnetIds": [{
					"Ref": "MonoToMicroSubnet1"
				}, {
					"Ref": "MonoToMicroSubnet2"
				}]
			}
		},
		"EC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Open App access",
				"VpcId": {
					"Ref": "MonoToMicroVPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": 80,
						"ToPort": 80,
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": 443,
						"ToPort": 443,
						"CidrIp": "0.0.0.0/0"
					}
				],
				"SecurityGroupEgress": [
					{
						"IpProtocol": "tcp",
						"FromPort": 80,
						"ToPort": 80,
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": 443,
						"ToPort": 443,
						"CidrIp": "0.0.0.0/0"
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": "MonoToMicroEC2SG"
				}]
			}
		},
		"EC2SecurityGroupDBRule": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"GroupId": { "Ref": "EC2SecurityGroup" },
				"IpProtocol": "tcp",
				"FromPort": 3306,
				"ToPort": 3306,
				"DestinationSecurityGroupId": { "Ref": "DBSecurityGroup" }
			}
		},
		"S3InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "S3Role"
				}]
			}
		},
		"S3Policy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "S3Policy",
				"PolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"s3:GetBucketLocation",
							"s3:GetObject",
							"s3:GetObjectAcl",
							"s3:PutObject",
							"s3:PutObjectAcl"
						],
						"Resource": [
							{ "Fn::GetAtt": [ "UIBucket", "Arn" ] },
							{ "Fn::GetAtt": [ "AssetBucket", "Arn" ] },
							{ "Fn::Join": [ "", 
								[ { "Fn::GetAtt": [ "UIBucket", "Arn" ] }, "/*" ]
							] },
							{ "Fn::Join": [ "", 
								[ { "Fn::GetAtt": [ "AssetBucket", "Arn" ] }, "/*" ]						
							] }
						]
					}]
				},
				"Roles": [{
					"Ref": "S3Role"
				}]
			}
		},
		"S3Role": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"ManagedPolicyArns": [ "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore", "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy" ],
				"Path": "/"
			}
		},
		"DBInstance": {
			"Type": "AWS::RDS::DBInstance",
			"DeletionPolicy": "Delete",

			"Properties": {
				"DBName": "MonoToMicroDB",
				"DBInstanceIdentifier": "MonoToMicroDB",
				"Engine": "MySQL",
				"DBInstanceClass": "db.t2.micro",
				"Port": "3306",
				"MasterUsername": "MonoToMicroUser",
				"MasterUserPassword": "MonoToMicroPassword",
				"VPCSecurityGroups": [{
					"Ref": "DBSecurityGroup"
				}],
				"AllocatedStorage": "5",
				"DBSubnetGroupName": {
					"Ref": "DBSubnetGroup"
				},
				"MultiAZ": "false",
				"Tags": [{
					"Key": "Name",
					"Value": "MonoToMicroDB"
				}]
			}
		},
		"UIBucket": {
		    "Type": "AWS::S3::Bucket",
		    "Properties": {
		        "WebsiteConfiguration": {
		          "ErrorDocument": "error.html",
		          "IndexDocument": "index.html"
		        }
		    }
		},
		"AssetBucket": {
			"Type": "AWS::S3::Bucket"
		},
		"EC2Instance": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "DBInstance",
			"CreationPolicy": {
				"ResourceSignal": {
					"Count": 1,
					"Timeout": "PT30M"
				}
			},
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"default": [
							"01_setupCfnHup",
							"02_config-amazon-cloudwatch-agent",
							"03_restart_amazon-cloudwatch-agent"
						],
						"UpdateEnvironment": [
							"02_config-amazon-cloudwatch-agent",
							"03_restart_amazon-cloudwatch-agent"
						]
					},
					"02_config-amazon-cloudwatch-agent": {
						"files": {
							"/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json": {
								"content": {"Fn::Sub":
									"{\n  \"metrics\": {\n    \"metrics_collected\": {\n      \"procstat\": [\n        {\n          \"exe\": \"java\",\n          \"measurement\": [\n            \"cpu_time\",\n            \"cpu_time_system\",\n            \"cpu_time_user\"\n          ]\n        }\n      ]\n    }\n  },\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\n            \"file_path\": \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\",\n            \"log_group_name\": \"amazon-cloudwatch-agent.log\",\n            \"log_stream_name\": \"amazon-cloudwatch-agent.log\",\n            \"timezone\": \"UTC\"\n          },\n          {\n            \"file_path\": \"/var/log/cloud-init-output.log\",\n            \"log_group_name\": \"cloud-init-output.log\",\n            \"log_stream_name\": \"cloud-init-output.log\",\n            \"timezone\": \"Local\"\n          }\n        ]\n      }\n    },\n    \"log_stream_name\": \"unicorn_stream_name\",\n    \"force_flush_interval\" : 15\n  }\n}"
								}
							}
						}
					},
					"03_restart_amazon-cloudwatch-agent": {
						"commands": {
							"01_stop_service": {
								"command": "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop"
							},
							"02_start_service": {
								"command": "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s"
							}
						}
					},
					"01_setupCfnHup": {
						"files": {
							"/etc/cfn/cfn-hup.conf": {
								"content": {"Fn::Sub": "[main]\n                 stack=${AWS::StackId}\n                 region=${AWS::Region}\n                 interval=1"},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf": {
								"content": {"Fn::Sub": "[cfn-auto-reloader-hook]\n                 triggers=post.update\n                 path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent\n                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment\n                 runas=root"},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/lib/systemd/system/cfn-hup.service": {
								"content": {"Fn::Sub": " [Unit]\n                  Description=cfn-hup daemon\n                  [Service]\n                  Type=simple\n                  ExecStart=/opt/aws/bin/cfn-hup\n                  Restart=always\n                  [Install]\n                  WantedBy=multi-user.target"}
							}
						},
						"commands": {
							"01enable_cfn_hup": {
								"command": {"Fn::Sub": "systemctl enable cfn-hup.service"}
							},
							"02start_cfn_hup": {
								"command": {"Fn::Sub": "systemctl start cfn-hup.service"}
							}
						}
					}
				}
			},
			"Properties": {
				"InstanceType": "t2.micro",
				"ImageId": {
					"Ref": "LatestAmiId"
    		    },
				"SubnetId": {
					"Ref": "MonoToMicroSubnet1"
				},
				"SecurityGroupIds": [{
					"Ref": "EC2SecurityGroup"
				}],
				"IamInstanceProfile": {
					"Ref": "S3InstanceProfile"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["",
							[
								"#!/bin/bash\n",
								"sudo yum -y install amazon-cloudwatch-agent\n",
								{ "Fn::Sub" : "/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets default\n" },
								"Database=", {
									"Fn::GetAtt": ["DBInstance", "Endpoint.Address"]
								}, "\n",
								"sudo yum -y update\n",
								"sudo yum -y install mysql\n",
								"sudo yum -y install java-1.8.0-openjdk-devel\n",
								"sudo yum -y install unzip\n",
								"sudo yum -y install git \n",
								"git clone https://github.com/aws-samples/unishop-monolith-to-microservices.git /home/ec2-user/MonoToMicro\n",
								"sudo mysql -u MonoToMicroUser -h", {
									"Fn::GetAtt": ["DBInstance", "Endpoint.Address"]
								}, " -P 3306 -pMonoToMicroPassword < /home/ec2-user/MonoToMicro/MonoToMicroLegacy/database/create_tables.sql\n",
								"export MONO_TO_MICRO_DB_ENDPOINT=", {
									"Fn::GetAtt": ["DBInstance", "Endpoint.Address"]
								}, "\n",
								"cd /home/ec2-user/\n",
								"sudo wget https://services.gradle.org/distributions/gradle-5.6.3-bin.zip\n",
								"sudo unzip -d /home/ec2-user/ /home/ec2-user/gradle-5.6.3-bin.zip\n",
								"export PATH=$PATH:/home/ec2-user/gradle-5.6.3/bin\n",
								"cd /home/ec2-user/MonoToMicro/MonoToMicroLegacy\n",
								"gradle clean build\n",
								"cd /home/ec2-user/MonoToMicro/MonoToMicroLambda\n",
								"gradle clean build\n",
								"AWS_DEFAULT_REGION=", {
									"Ref": "AWS::Region"
								}, "\n",
								"UI_RANDOM_NAME=", {
									"Ref": "UIBucket"
								}, "\n",
								"ASSETS_RANDOM_NAME=", {
									"Ref": "AssetBucket"
								}, "\n",
								"declare -i EXIT_CODE=0\n",
								"aws s3 cp /home/ec2-user/MonoToMicro/MonoToMicroUI s3://$UI_RANDOM_NAME/ --recursive --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers\n",
								"EXIT_CODE+=$?\n",
								"aws s3 cp /home/ec2-user/MonoToMicro/MonoToMicroLambda/build/libs s3://$ASSETS_RANDOM_NAME/ --recursive --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers\n",
								"EXIT_CODE+=$?\n",
								"java -jar /home/ec2-user/MonoToMicro/MonoToMicroLegacy/build/libs/MonoToMicroLegacy-0.0.1-SNAPSHOT.jar &\n",
								"EXIT_CODE+=$?\n",
								"/opt/aws/bin/cfn-signal -e $EXIT_CODE",
									" --stack ", { "Ref": "AWS::StackName" },
									" --resource EC2Instance",
									" --region ", { "Ref" : "AWS::Region" }, "\n"
							]
						]
					}
				},
				"Tags": [{
					"Key": "Name",
					"Value": "MonoToMicroEC2"
				}]
			}
		}
	},
	"Outputs": {
		"PublicDns": {
			"Value": {
				"Fn::Join": [
					"/",
					[
						"http:/",
						{
							"Fn::GetAtt": ["EC2Instance", "PublicDnsName"]
						}
					]
				]
			},
			"Description": "Server Public DNS"
		},
		"AssetBucket": {
			"Value": { "Ref": "AssetBucket" },
			"Description": "S3 Bucket containing the compiled Lambda function"
		},
		"UIBucket": {
			"Value": { "Ref": "UIBucket" },
			"Description": "S3 Bucket containing the UniShop website"
		}
	}
}
